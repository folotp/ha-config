#==============================================================================
# Indoor Air Quality Package
#==============================================================================

template:
  - sensor:
      #-------------------------------------------------------------------------
      # Mechanical Ventilation Instantaneous Air Changes per Hour Estimate
      # - controlled air changes via fans/HRV/etc.)
      #-------------------------------------------------------------------------
      - name: "IAQ Ventilation Mechanical"
        unique_id: 8c2e7b1f-3d4a-5e6f-7a8b-9c0d1e2f3a4b
        state_class: measurement
        unit_of_measurement: "ACH"
        state: >-
          {# — define flow rates (CFM) — #}
          {% set flow_low  = 70 %}
          {% set flow_high = 105 %}
          {# — get conditioned volume from sensor — #}
          {% set V = states('sensor.house_conditioned_volume') | float %}

          {# — only calculate when HRV is running — #}
          {% if is_state('fan.hvac_hrv', 'on') %}

            {# — read HRV speed from selector and convert lowercase — #}
            {% set hrv_speed = states('input_select.hvac_hrv_speed') | lower %}

            {# — choose flow based on HRV speed — #}
            {% set flow_cfm = hrv_speed == 'high' and flow_high or flow_low %}

            {# — convert CFM → m³/h and compute ACH — #}
            {% set flow_m3h = flow_cfm * 1.699 %}
            {{ (flow_m3h / V) | round(2) }}
          {% else %}
            0
          {% endif %}

      #-------------------------------------------------------------------------
      # Indoor Air Quality Index (U.S. AQI)
      # Methodology: EPA AQI formula: https://www.airnow.gov/aqi/aqi-calculation/
      #-------------------------------------------------------------------------
      - name: "IAQ Air Quality Index US"
        unique_id: 5dfb24e6-1452-45e5-8f94-1956a2a5466b
        unit_of_measurement: "AQI"
        device_class: aqi
        state: >-
          {% set pm25 = states('sensor.iaq_apollo_air1_pm2_5')|float(0) %}
          {% set pm10 = states('sensor.iaq_apollo_air1_pm10')|float(0) %}
          {% set breakpoints_25 = [
            (0.0, 12.0, 0, 50),
            (12.1, 35.4, 51, 100),
            (35.5, 55.4, 101, 150),
            (55.5, 150.4, 151, 200),
            (150.5, 250.4, 201, 300),
            (250.5, 350.4, 301, 400),
            (350.5, 500.4, 401, 500)
          ] %}
          {% set breakpoints_10 = [
            (0, 54, 0, 50),
            (55, 154, 51, 100),
            (155, 254, 101, 150),
            (255, 354, 151, 200),
            (355, 424, 201, 300),
            (425, 504, 301, 400),
            (505, 604, 401, 500)
          ] %}
          {% macro calc_aqi(C, breakpoints) -%}
            {%- set v = namespace(result=none) -%}
            {%- for bp in breakpoints %}
              {%- set Clow, Chigh, Ilow, Ihigh = bp %}
              {%- if C >= Clow and C <= Chigh %}
                {%- set v.result = ((Ihigh - Ilow) / (Chigh - Clow) * (C - Clow) + Ilow) | round(0) %}
              {%- endif %}
            {%- endfor %}
            {{ v.result if v.result is not none else (500 if C > breakpoints[-1][1] else 0) }}
          {%- endmacro %}
          {% set aqi_25 = calc_aqi(pm25, breakpoints_25) | int(0) %}
          {% set aqi_10 = calc_aqi(pm10, breakpoints_10) | int(0) %}
          {{ ( [aqi_25, aqi_10] | max ) if ( [aqi_25, aqi_10] | max ) > 0 else 0 }}
        icon: >-
          {% set level = state_attr('sensor.iaq_air_quality_index_us','aqi_category') %}
          {% if level == 'good' %}
            mdi:emoticon-happy-outline
          {% elif level == 'moderate' %}
            mdi:emoticon-neutral-outline
          {% elif level == 'unhealthy_sensitive' %}
            mdi:emoticon-sad-outline
          {% elif level == 'unhealthy' %}
            mdi:face-mask-outline
          {% elif level == 'very_unhealthy' %}
            mdi:biohazard
          {% elif level == 'hazardous' %}
            mdi:biohazard
          {% else %}
            mdi:help-circle-outline
          {% endif %}
        attributes:
          pm2_5: "{{ states('sensor.iaq_apollo_air1_pm2_5') }}"
          pm10: "{{ states('sensor.iaq_apollo_air1_pm10') }}"
          aqi_pm2_5: >-
            {% set pm25 = states('sensor.iaq_apollo_air1_pm2_5')|float(0) %}
            {% set breakpoints_25 = [
              (0.0, 12.0, 0, 50),
              (12.1, 35.4, 51, 100),
              (35.5, 55.4, 101, 150),
              (55.5, 150.4, 151, 200),
              (150.5, 250.4, 201, 300),
              (250.5, 350.4, 301, 400),
              (350.5, 500.4, 401, 500)
            ] %}
            {% macro calc_aqi(C, breakpoints) -%}
              {% for bp in breakpoints %}
                {% set Clow, Chigh, Ilow, Ihigh = bp %}
                {% if C >= Clow and C <= Chigh %}
                  {{ ((Ihigh - Ilow) / (Chigh - Clow) * (C - Clow) + Ilow) | round(0) }}
                {% endif %}
              {% endfor %}
              {{ 500 if C > breakpoints[-1][1] else 0 }}
            {%- endmacro %}
            {{ calc_aqi(pm25, breakpoints_25) }}
          aqi_pm10: >-
            {% set pm10 = states('sensor.iaq_apollo_air1_pm10')|float(0) %}
            {% set breakpoints_10 = [
              (0, 54, 0, 50),
              (55, 154, 51, 100),
              (155, 254, 101, 150),
              (255, 354, 151, 200),
              (355, 424, 201, 300),
              (425, 504, 301, 400),
              (505, 604, 401, 500)
            ] %}
            {% macro calc_aqi(C, breakpoints) -%}
              {% for bp in breakpoints %}
                {% set Clow, Chigh, Ilow, Ihigh = bp %}
                {% if C >= Clow and C <= Chigh %}
                  {{ ((Ihigh - Ilow) / (Chigh - Clow) * (C - Clow) + Ilow) | round(0) }}
                {% endif %}
              {% endfor %}
              {{ 500 if C > breakpoints[-1][1] else 0 }}
            {%- endmacro %}
            {{ calc_aqi(pm10, breakpoints_10) }}
          aqi_category: >-
            {% set aqi = states('sensor.iaq_air_quality_index_us') | int(0) %}
            {% if aqi <= 50 %}
              good
            {% elif aqi <= 100 %}
              moderate
            {% elif aqi <= 150 %}
              unhealthy_sensitive
            {% elif aqi <= 200 %}
              unhealthy
            {% elif aqi <= 300 %}
              very_unhealthy
            {% elif aqi > 300 %}
              hazardous
            {% else %}
              unknown
            {% endif %}

  #-------------------------------------------------------------------------
  # Natural Infiltration Instantaneous Air Changes per Hour Estimate
  # - uncontrolled air changes (infiltration) driven by stack & wind
  #
  # -- Note: needs a trigger because Home Assistant only auto-generates
  #    update triggers for entities that appear directly in the state: or
  #    attributes: blocks but it does not scan the variables: block where
  #    all the logic is.
  #-------------------------------------------------------------------------
  - triggers:
      - trigger: time_pattern
        seconds: 0 # fire this at 0 seconds of every minute
    variables:
      # All the math lives here exactly once so it can be used in both the state
      # and in the attributes section

      # ── House constants ───────────────────────────────
      volume_m3: "{{ states('sensor.house_conditioned_volume') | float(0.01) }}"
      leak_height_m: 3.4
      ach50: 7.62 # Air Change per Hour at 50 Pascal from blower-door test
      exponent: 0.70
      pressure_coeff: 0.10

      # ── Derived from blower-door ──────────────────────
      q50_m3_s: "{{ ach50 * volume_m3 / 3600 }}"
      leak_coeff: "{{ q50_m3_s / (50**exponent) }}"

      # ── Live sensor inputs ────────────────────────────
      tin_c: "{{ states('sensor.home_room_temperature_median') | float(20) }}"
      tout_c: "{{ states('sensor.patio_sensor_temperature')     | float(0) }}"
      baro_kpa: "{{ states('sensor.weather_ec_barometric_pressure') | float(101.325) }}"
      raw_wind: "{{ states('sensor.weather_ec_wind_speed') | float(0) }}"
      wind_uom: "{{ state_attr('sensor.weather_ec_wind_speed','unit_of_measurement') }}"

      # ── Unit conversions ──────────────────────────────
      tin_k: "{{ tin_c + 273.15 }}"
      tout_k: "{{ tout_c + 273.15 }}"
      baro_pa: "{{ baro_kpa * 1000 }}"
      wind_m_s: >
        {% if wind_uom == 'km/h' %}
          {{ raw_wind / 3.6 }}
        {% elif wind_uom == 'mph' %}
          {{ raw_wind * 0.44704 }}
        {% else %}
          {{ raw_wind }}
        {% endif %}

      # ── Physics ───────────────────────────────────────
      air_density: "{{ baro_pa / (287.05 * tin_k) }}"
      delta_T: "{{ (tin_k - tout_k) | abs }}"
      dp_stack: "{{ air_density * 9.81 * leak_height_m * delta_T / tin_k }}"
      dp_wind: "{{ 0.5 * air_density * pressure_coeff * wind_m_s**2 }}"
      dp_natural: "{{ (dp_stack**exponent + dp_wind**exponent)**(1/exponent) }}"
      flow_m3_s: "{{ leak_coeff * (dp_natural**exponent) }}"
      ach_inst: "{{ flow_m3_s * 3600 / volume_m3 }}"

    sensor:
      - name: "IAQ Ventilation Natural Infiltration"
        unique_id: 2f8a2ee2-4ca5-4c23-9aee-3b2dcb34f6f1
        unit_of_measurement: "ACH"
        state_class: measurement
        #  ── State uses the variable computed above ─────────
        state: "{{ ach_inst | round(2) }}"
        #  ── Attributes reference the variables ─────────────
        attributes:
          conditioned_volume_m3: "{{ volume_m3 | round(1) }}"
          effective_leak_height_m: "{{ leak_height_m }}"
          blower_door_ach50_h_1: "{{ ach50 }}"
          pressure_exponent_n: "{{ exponent }}"
          wind_pressure_coefficient_cp: "{{ pressure_coeff }}"
          indoor_temperature_C: "{{ tin_c }}"
          outdoor_temperature_C: "{{ tout_c }}"
          barometric_pressure_kPa: "{{ baro_kpa }}"
          wind_speed_m_s: "{{ wind_m_s | round(2) }}"
          air_density_kg_m3: "{{ air_density | round(3) }}"
          stack_pressure_Pa: "{{ dp_stack | round(3) }}"
          wind_pressure_Pa: "{{ dp_wind  | round(3) }}"
          combined_pressure_Pa: "{{ dp_natural | round(3) }}"
          infiltration_flow_m3_s: "{{ flow_m3_s | round(4) }}"

  #-------------------------------------------------------------------------
  # Total Ventilation Instantaneous Air Changes per Hour Estimate
  # - natural infiltration + mechanical ventilation
  #-------------------------------------------------------------------------
  - triggers:
      - trigger: time_pattern
        seconds: 0 # fire this at 0 seconds of every minute
    sensor:
      - name: "IAQ Ventilation Total"
        unique_id: a1b2c3d4-e5f6-7a8b-9c0d-1e2f3a4b5c6d
        state_class: measurement
        unit_of_measurement: "ACH"
        state: >
          {{ (
              states('sensor.iaq_ventilation_natural_infiltration')  | float(0)
            + states('sensor.iaq_ventilation_mechanical') | float(0)
          ) | round(2) }}

# ==========================================================
# Derived Sensors (cumulative & rolling air changes)
# ==========================================================
sensor:
  # Air changes in the past rolling 60 minutes
  - platform: statistics
    name: "IAQ Air Changes Last Hour"
    unique_id: 0a1b2c3d-4e5f-6071-8293-94a5b6c7d8e9
    entity_id: sensor.iaq_ventilation_total
    state_characteristic: mean # difference over the window
    max_age:
      hours: 1
    sampling_size: 250 # keep plenty of samples (defaults to 20)
    precision: 2
